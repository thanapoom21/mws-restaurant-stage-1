{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","map","window","initMap","fetchRestaurantFromURL","error","console","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","innerHTML","address","image","className","src","imageUrlForRestaurant","setAttribute","imageAltForRestaurant","cuisine","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","comments","breadcrumb","url","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.setAttribute(\"alt\", DBHelper.imageAltForRestaurant(restaurant));\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"]}